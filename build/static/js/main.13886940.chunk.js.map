{"version":3,"sources":["src/LayOut.js","src/Tooltip.js","src/Day.js","src/Week.js","src/Month.js","src/Year.js","App.js","reportWebVitals.js","index.js"],"names":["LayOut","children","Tooltip","text","tooltipProp","styles","container","display","justifyContent","height","holiday","border","backgroundColor","today","Day","date","daysToMark","day","format","find","d","isEqual","isHoliday","style","isSameDay","Date","cell","description","Week","week","props","days","map","i","key","toString","flexDirection","marginTop","title","textTransform","Month","weeks","daysInMonth","getDaysInMonth","Array","currentDate","addDays","lastDay","isSunday","dayPosition","getDay","getWeeks","boder","Title","gridTemplateColumns","gridTemplateRows","Year","year","inputYear","months","keys","month","addMonths","App","holidays","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13886940.chunk.js","sourcesContent":["// @flow\n\nimport * as React from \"react\";\ntype Props = {\n  children?: React.Node,\n};\nexport default function LayOut({ children }: Props): React$Element<\"div\"> {\n  return <div>{children}</div>;\n}\n","// @flow\nimport * as React from \"react\";\nimport ReactTooltip from \"react-tooltip\";\n\ntype Props = {\n  text: string,\n  children: React.Node,\n};\nexport default function Tooltip({ text, children }: Props): any {\n  const tooltipProp = {\n    \"data-tip\": text,\n  };\n  return (\n    <>\n      <div {...tooltipProp}>{children}</div>\n      <ReactTooltip />\n    </>\n  );\n}\n","// @flow\n\nimport type { DaysToMark } from \"./Year\";\n\nimport { format, isEqual, isSameDay } from \"date-fns\";\nimport * as React from \"react\";\nimport Tooltip from \"./Tooltip\";\nconst styles = {\n  container: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    height: \"20px\",\n  },\n  holiday: {\n    border: \"1px solid red\",\n    backgroundColor: \"lightblue\",\n  },\n  today: {\n    border: \"1px solid black\",\n    backgroundColor: \"gray\",\n  },\n};\ntype Props = { date: ?Date, daysToMark?: DaysToMark };\nexport default function Day({ date, daysToMark }: Props): any {\n  if (date == null) {\n    return null;\n  }\n  const day = date != null ? format(date, \"d\") : null;\n  const holiday =\n    date != null ? daysToMark?.find((d) => isEqual(date, d.date)) : null;\n  const isHoliday = holiday != null;\n  const isToday = isSameDay(date, new Date());\n  const style = isToday\n    ? { ...styles.container, ...styles.today }\n    : isHoliday\n    ? { ...styles.container, ...styles.holiday }\n    : styles.container;\n\n  const cell = <div style={style}>{day}</div>;\n\n  return isHoliday ? (\n    <Tooltip text={holiday?.description ?? \"\"}>{cell}</Tooltip>\n  ) : (\n    cell\n  );\n}\n","// @flow\n\nimport type { DaysToMark } from \"./Year\";\n\nimport Day from \"./Day\";\n\nimport * as React from \"react\";\ntype Props = {\n  week: $ReadOnlyArray<Date>,\n  daysToMark?: DaysToMark,\n};\nexport default function Week({ week, ...props }: Props): React$Element<\"tr\"> {\n  const days = week.map((day, i) => (\n    <td key={day?.toString() ?? i}>\n      <Day {...props} key={day?.toString() ?? i} date={day} />\n    </td>\n  ));\n  return <tr>{days}</tr>;\n}\n","// @flow\n\nimport Week from \"./Week\";\nimport type { DaysToMark } from \"./Year\";\nimport { addDays, format, getDay, getDaysInMonth, isSunday } from \"date-fns\";\nimport * as React from \"react\";\n\nconst styles = {\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    border: \"1px solid black\",\n    marginTop: \"5px\",\n  },\n  title: {\n    display: \"flex\",\n    height: \"20px\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n};\n\ntype Props = {\n  date: Date,\n  daysToMark?: DaysToMark,\n};\n\nexport default function Month({ date, ...props }: Props): React$Element<\"div\"> {\n  const weeks = getWeeks(date);\n\n  return (\n    <div style={styles.container}>\n      <div style={styles.title}>{format(date, \"MMMM\")}</div>\n      <table boder=\"1\">\n        <Title />\n        <tbody>\n          {weeks.map((week, i) => (\n            <Week {...props} key={i} week={week} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nfunction Title() {\n  const days = [\n    \"Monday\",\n    \"Tuesday\",\n    \"Wesnesday\",\n    \"Thrusday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\",\n  ];\n  return (\n    <thead>\n      <tr>\n        {days.map((d) => (\n          <th key={d}>{d[0]}</th>\n        ))}\n      </tr>\n    </thead>\n  );\n}\n\nfunction getWeeks(date: Date) {\n  const daysInMonth = getDaysInMonth(date);\n  const weeks = [...Array(6)].map(() => [...Array(7)]);\n  for (let i = 0, week = 0; i < daysInMonth; i++) {\n    const currentDate = addDays(date, i);\n    const lastDay = isSunday(currentDate);\n    const dayPosition = lastDay ? 6 : getDay(currentDate) - 1;\n    weeks[week][dayPosition] = currentDate;\n    week += lastDay ? 1 : 0;\n  }\n\n  return weeks;\n}\n","// @flow\n\nimport Month from \"./Month\";\nimport * as React from \"react\";\nimport { addMonths } from \"date-fns\";\ntype DayToMark = {\n  date: Date,\n  description?: string,\n};\nexport type DaysToMark = $ReadOnlyArray<DayToMark>;\nconst styles = {\n  container: {\n    display: \"grid\",\n    gridTemplateColumns: \"33% 34% 33%\",\n    gridTemplateRows: \"25% 25% 25% 25%\",\n  },\n};\ntype Props = {\n  year: number,\n  daysToMark?: DaysToMark,\n};\nexport default function Year({ year, ...props }: Props): any {\n  const inputYear = new Date(year, 0);\n  const months = [...Array(12).keys()].map((month) =>\n    addMonths(inputYear, month)\n  );\n  return (\n    <div style={styles.container}>\n      {months.map((month) => (\n        <Month {...props} date={month} key={month.toString()} />\n      ))}\n    </div>\n  );\n}\n","// @flow\nimport \"./App.css\";\nimport LayOut from \"./src/LayOut\";\nimport React from \"react\";\nimport Year from \"./src/Year\";\nimport type { DaysToMark } from \"./src/Year\";\n\nfunction App(): any {\n  const year = 2021;\n  const holidays: DaysToMark = [\n    {\n      date: new Date(2021, 10, 25),\n      description: \"Thanksgiving\",\n    },\n    {\n      date: new Date(2021, 10, 26),\n      description: \"After Thanksgiving\",\n    },\n    {\n      date: new Date(2021, 11, 24),\n      description: \"Other\",\n    },\n    {\n      date: new Date(2021, 11, 27),\n      description: \"Other\",\n    },\n    {\n      date: new Date(2021, 11, 31),\n      description: \"Other\",\n    },\n  ];\n  return (\n    <LayOut>\n      <Year year={year} daysToMark={holidays} />\n    </LayOut>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}